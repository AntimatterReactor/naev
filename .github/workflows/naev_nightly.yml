on: push
  #repository_dispatch:
  #  types: manual-nightly
  #schedule:
  #  - cron: '0 0 * * *'

name: Nightly Release

env:
  DESTDIR: "${{ github.workspace }}/dist/"
  MESON: "${{ github.workspace }}/source/meson.sh"

jobs:
  "Package_Source":
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Naev Repository
      uses: actions/checkout@v2
      with:
        path: source
        fetch-depth: 0

    - name: Update APT Cache
      run: |
        sudo apt-get update

    - name: Install Additional Build Dependencies
      run: |
        sudo apt-get install \
          ninja-build

    - name: Meson Build
      run: |
        sh $MESON setup build source -Dexecutable=disabled -Ddocs_c=disabled -Ddocs_lua=disabled
        sh $MESON dist -C build --no-tests

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: naev-${{ github.sha }}
        path: ${{ github.workspace }}/build/meson-dist/*
        if-no-files-found: error

  "Build_Release":
    needs: "Package_Source"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-16.04
            shell: bash

          - os: windows-latest
            shell: msys2 {0}
            config: windows.ini

    defaults:
      run:
        shell: ${{ matrix.shell }}

    runs-on: ${{ matrix.os }}

    steps:
    - name: Update APT Cache
      if: ${{ runner.os == 'Linux'}}
      run: |
        sudo apt-get update

    - name: Install Additional Build Dependencies
      if: ${{ runner.os == 'Linux'}}
      run: |
        sudo apt-get install \
          autopoint \
          binutils-dev \
          build-essential \
          gettext \
          intltool \
          libfreetype6-dev \
          libgl1-mesa-dev \
          libiberty-dev \
          libluajit-5.1-dev \
          libopenal-dev \
          libpng-dev \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsuitesparse-dev \
          libvorbis-dev \
          libxml2-dev

    - name: Install Ninja-Build
      if: ${{ runner.os == 'Linux'}}
      run: |
        sudo apt-get -t xenial-backports install \
          ninja-build

    - name: Install MinGW Packages
      if: ${{ runner.os == 'Windows'}}
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: git tar mingw-w64-x86_64-clang mingw-w64-x86_64-freetype mingw-w64-x86_64-libvorbis mingw-w64-x86_64-libxml2 mingw-w64-x86_64-luajit mingw-w64-x86_64-meson mingw-w64-x86_64-ninja mingw-w64-x86_64-openal mingw-w64-x86_64-pkg-config mingw-w64-x86_64-SDL2 mingw-w64-x86_64-SDL2_image mingw-w64-x86_64-SDL2_mixer mingw-w64-x86_64-suitesparse mingw-w64-x86_64-nsis
    
    - name: Get Source
      uses: actions/download-artifact@v2
      with:
        name: naev-${{ github.sha }}

    - name: Extract Source
      run: |
        mkdir source
        tar -xf naev-*.tar.xz -C source --strip 1

    - name: Meson Setup
      if: ${{ runner.os == 'Windows'}}
      run: |
        sh $MESON setup build source \
            --native-file='source/utils/build/${{ matrix.config }}' \
            --buildtype=release \
            --pkg-config-path=${{ matrix.pkg-config-path }} \
            -Db_lto=true \
            -Dauto_features=enabled \
            -Ddocs_c=disabled \
            -Ddocs_lua=disabled

    - name: Meson Compile
      if: ${{ runner.os == 'Windows'}}
      run: |
        sh $MESON compile -C build

    - name: Package
      run: |
        ./source/utils/release.sh -n -s source -b build -o "${{ env.DESTDIR }}/release" -r ${{ runner.os }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: naev-${{ matrix.os }}-${{ github.sha }}
        path: ${{ env.DESTDIR }}/release/out/*
        if-no-files-found: error

  "Upload-Release":
      runs-on: ubuntu-latest
      needs: [Build_Release, Package_Source]
      #if: ${{ github.repository == 'naev/naev' }}

      steps:
      - name: Get Artifacts
        uses: actions/download-artifact@v2

      - name: Create Release Staging Area
        run: |
          mkdir -p ${{ github.workspace }}/dist/release

      - name: Collect files for distribution
        run: |
          cp naev-*.tar.xz ${{ github.workspace }}/dist/release
          cp *.AppImage ${{ github.workspace }}/dist/release
          cp *.exe ${{ github.workspace }}/dist/release

      - name: Upload Release Assets
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "nightly"
          prerelease: true
          title: "Nightly Build"
          files: |
            ${{ github.workspace }}/dist/release/*

  "Upload-Steam":
      runs-on: ubuntu-latest
      needs: [Build_Release]
      if: ${{ github.repository == 'naev/naev' }}

      steps:
      - name: Update APT Cache
        run: |
          sudo add-apt-repository multiverse
          sudo dpkg --add-architecture i386
          sudo apt-get update

      - name: Install Build Dependencies
        run: |
          sudo apt-get install \
            build-essential \
            automake \
            autoconf-archive \
            libsdl2-dev \
            libsdl2-mixer-dev \
            libsdl2-image-dev \
            libgl1-mesa-dev \
            libxml2-dev \
            libfreetype6-dev \
            libpng-dev \
            libopenal-dev \
            libvorbis-dev \
            binutils-dev \
            libiberty-dev \
            gettext \
            autopoint \
            intltool

      - name: Install SteamCMD
        run: |
          echo steamcmd steam/question select "I AGREE" | sudo debconf-set-selections
          sudo apt install lib32gcc1 steamcmd

      - name: Checkout Naev Repository
        uses: actions/checkout@v2

      - name: Get VERSION
        run: |
          ./autogen.sh
          ./configure
          make dat/VERSION

      - name: Create Release Staging Area
        run: |
          mkdir -p ${{ github.workspace }}/dist/steam/ndata

      - name: Make data
        run: |
          ./autogen.sh
          ./configure
          make data
          cp -r dat/ dist/steam/ndata

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ github.workspace }}/dist/steam

      - name: Build and Upload Steam Release
        run: |
          ./extras/steam/SteamDeploy.sh --nightly
        env:
          STEAMCMD_USER: ${{ secrets.STEAMCMD_USER }}
          STEAMCMD_PASS: ${{ secrets.STEAMCMD_PASS }}
          TFA_IMAP: ${{ secrets.TFA_IMAP }}
          TFA_PASS: ${{ secrets.TFA_PASS }}
          TFA_USER: ${{ secrets.TFA_USER }}
