on:
  repository_dispatch:
    types: manual-nightly
  push:
#  schedule:
#    - cron: '0 0 * * *'

name: Nightly Release

jobs:
  "Package_Source":
    runs-on: ubuntu-latest
    container:
      image: projectsynchro/synchros_sexy_docker_images:naev-ubuntu1604

    steps:
      - name: Checkout Naev Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: source
          submodules: true
          

      - name: Package Dist
        run: |
          meson setup build source -Dexecutable=disabled -Ddocs_c=disabled -Ddocs_lua=disabled
          meson dist -C build --no-tests --include-subprojects

      - name: Collect Artifacts
        run: |
          mkdir -p dist/out/steam
          mv build/meson-dist/naev-*.tar.xz dist/out/source.tar.xz
          cp source/dat/VERSION dist/out
          cp source/CHANGELOG dist/out
          cp -r source/utils/ci/steam/* dist/out/steam

      - name: Upload Source Artifact
        uses: actions/upload-artifact@v2
        with:
          name: naev-dist
          path: ${{ github.workspace }}/dist/out/source.tar.xz
          if-no-files-found: error

      - name: Upload Version Artifact
        uses: actions/upload-artifact@v2
        with:
          name: naev-version
          path: ${{ github.workspace }}/dist/out/VERSION
          if-no-files-found: error

      - name: Upload Changelog Artifact
        uses: actions/upload-artifact@v2
        with:
          name: naev-changelog
          path: ${{ github.workspace }}/dist/out/CHANGELOG
          if-no-files-found: error

      - name: Upload Deployment Script Artifact
        uses: actions/upload-artifact@v2
        with:
          name: naev-steam-deployment
          path: ${{ github.workspace }}/dist/out/steam/*
          if-no-files-found: error

  "Linux_Naev_Release":
    needs: "Package_Source"
    runs-on: ubuntu-latest
    container:
      image: projectsynchro/synchros_sexy_docker_images:naev-ubuntu1604

    steps:
      - name: Get Source
        uses: actions/download-artifact@v2
        with:
          name: naev-dist

      - name: Extract Source
        run: |
          mkdir source
          tar -xf source.tar.xz -C source --strip 1

      - name: Compile AppImage
        id: appimageCompile
        run: |
          ./source/utils/buildAppImage.sh -m -s "source" -b "build" -o "${{ env.DESTDIR }}"
        env:
          APPIMAGE_EXTRACT_AND_RUN: 1

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: naev-linux-x86-64
          path: "${{ env.DESTDIR }}/out/*.AppImage"

  "Windows_Naev_Release":
    needs: "Package_Source"
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Install MinGW Packages
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git python tar mingw-w64-x86_64-clang mingw-w64-x86_64-freetype mingw-w64-x86_64-libvorbis mingw-w64-x86_64-libxml2 mingw-w64-x86_64-luajit mingw-w64-x86_64-mesa mingw-w64-x86_64-meson mingw-w64-x86_64-ninja mingw-w64-x86_64-nsis mingw-w64-x86_64-openal mingw-w64-x86_64-pkg-config mingw-w64-x86_64-physfs mingw-w64-x86_64-SDL2 mingw-w64-x86_64-suitesparse

      - name: Get Source
        uses: actions/download-artifact@v2
        with:
          name: naev-dist

      - name: Extract Source
        run: |
          mkdir source
          tar -xf source.tar.xz -C source --strip 1

      - name: Meson Setup
        run: |
          meson setup build source \
            --native-file='source/utils/build/windows.ini' \
            --buildtype=release \
            -Db_lto=true \
            -Dauto_features=enabled \
            -Ddocs_c=disabled \
            -Ddocs_lua=disabled

      - name: Meson Compile
        run: |
          meson compile -C build

      - name: Build Windows Installer
        run: |
          ./source/extras/windows/packageWindows.sh -n -s "source" -b "build" -o "$(pwd)/dist"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: naev-win64
          path: ${{ github.workspace }}/dist/out/*
          if-no-files-found: error

  "Steam_Naev_Release":
    needs: "Package_Source"
    runs-on: ubuntu-latest

    container:
      image: projectsynchro/synchros_sexy_docker_images:naev-steamruntime

    steps:
      - name: Get Source
        uses: actions/download-artifact@v1
        with:
          name: naev-dist

      - name: Extract Source
        run: |
          mkdir source
          tar -xf naev-dist/source.tar.xz -C source --strip 1

      - name: Meson Setup
        id: setup
        run: |
          meson setup build source \
              --native-file='source/utils/build/linux_steamruntime.ini' \
              --buildtype=release \
              -Db_lto=true \
              -Dauto_features=enabled \
              -Ddocs_c=disabled \
              -Ddocs_lua=disabled

      - name: Meson Compile
        run: |
          meson compile -C build

      - name: Collect Steam Linux64 Artifacts
        run: |
          mkdir -p dist/out/

          mv build/naev dist/out/naev.x64
          chmod +x dist/out/naev.x64

          tar -cJvf dist/out/steam-ndata.tar.xz source/dat

      - name: Upload Naev Binary Artifact
        uses: actions/upload-artifact@v1
        with:
          name: naev-steamruntime
          path: dist/out/naev.x64

      - name: Upload Naev Data Artifact
        uses: actions/upload-artifact@v1
        with:
          name: naev-ndata
          path: dist/out/steam-ndata.tar.xz

  "Upload_Naev_Release":
    strategy:
      fail-fast: true
      matrix:
        include:
          - releasetype: github
#          - releasetype: steam
#          - releasetype: itch

    runs-on: ubuntu-latest
    needs:
      [
        Package_Source,
        Linux_Naev_Release,
        Windows_Naev_Release,
        Steam_Naev_Release,
      ]
#    if: ${{ github.repository == 'naev/naev' }}

    steps:
      - name: Checkout Naev Repository
        uses: actions/checkout@v2

      - name: Update 'nightly' tag
        uses: EndBug/latest-tag@latest
        with:
          tag-name: nightly
          
      - name: Create Release Staging and Output Areas
        run: |
          mkdir -p {temp,dist/{staging,out/{lin64,win64}}}
        working-directory: ${{ github.workspace }}

      - name: Update APT Cache
        if: ${{ matrix.releasetype == 'steam' }}
        run: |
          sudo add-apt-repository multiverse
          sudo dpkg --add-architecture i386
          sudo apt-get update

      - name: Install SteamCMD
        if: ${{ matrix.releasetype == 'steam' }}
        run: |
          echo steamcmd steam/question select "I AGREE" | sudo debconf-set-selections
          sudo apt-get install lib32gcc1 libsdl2-2.0-0:i386 steamcmd

      - name: Install Butler
        if: ${{ matrix.releasetype == 'itch' }}
        run: |
          wget -O temp/butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip temp/butler.zip
          chmod +x butler
          ./butler -V

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ github.workspace }}/dist/staging

      - name: Build Github Release
        if: ${{ matrix.releasetype == 'github' }}
        run: |
          BUILD_DATE="$(date +%Y%m%d)"
          VERSION="$(<"dist/staging/naev-version/VERSION")"
          SUFFIX="$VERSION.$BUILD_DATE"

          mv dist/staging/naev-linux-x86-64/*.AppImage dist/out/naev-$SUFFIX-linux-x86-64.AppImage
          mv dist/staging/naev-win64/naev*.exe dist/out/naev-$SUFFIX-win64.exe
          mv dist/staging/naev-dist/source.tar.xz dist/out/naev-$SUFFIX-source.tar.xz

          chmod +x dist/out/naev-$SUFFIX-linux-x86-64.AppImage

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ github.workspace }}/dist/out/*.*"
          bodyFile: "${{ github.workspace }}/dist/staging/naev-changelog/CHANGELOG"
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          tag: 'nightly'

      - name: Build and Upload itch.io Release
        if: ${{ matrix.releasetype == 'itch' }}
        run: |
          BUILD_DATE="$(date +%Y%m%d)"
          VERSION="$(<"dist/staging/naev-version/VERSION")"
          SUFFIX="$VERSION.$BUILD_DATE"

          mv dist/staging/naev-linux-x86-64/*.AppImage dist/out/lin64/naev-$SUFFIX-linux-x86-64.AppImage
          chmod +x dist/out/lin64/naev-$SUFFIX-linux-x86-64.AppImage

          tar -Jxf "dist/staging/naev-win64/steam-win64.tar.xz" -C "dist/out/win64"
          tar -Jxf "dist/staging/naev-ndata/steam-ndata.tar.xz" -C "dist/out/win64" --strip 1

          ./butler push --userversion="$SUFFIX" dist/out/lin64 naev/naev:linux-x86-64-nightly
          ./butler push --userversion="$SUFFIX" dist/out/win64 naev/naev:windows-x86-64-nightly
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}

      - name: Build and Upload Steam Release
        if: ${{ matrix.releasetype == 'steam' }}
        run: |
          chmod -R +x dist/staging/naev-steam-deployment
          cp -r dist/staging/naev-steam-deployment/* ${{ github.workspace }}
          ./SteamDeploy.sh -n -t "${{ github.workspace }}/dist/staging" -o "${{ github.workspace }}/dist/out"
        env:
          STEAMCMD_USER: ${{ secrets.STEAMCMD_USER }}
          STEAMCMD_PASS: ${{ secrets.STEAMCMD_PASS }}
          TFA_IMAP: ${{ secrets.TFA_IMAP }}
          TFA_PASS: ${{ secrets.TFA_PASS }}
          TFA_USER: ${{ secrets.TFA_USER }}
